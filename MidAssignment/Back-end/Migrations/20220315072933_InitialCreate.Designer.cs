// <auto-generated />
using System;
using Back_end.Responsitory;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Back_end.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20220315072933_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Back_end.Models.Book", b =>
                {
                    b.Property<int>("bId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bId"), 1L, 1);

                    b.Property<int>("CategorycId")
                        .HasColumnType("int");

                    b.Property<string>("bAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bId");

                    b.HasIndex("CategorycId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Back_end.Models.BookBorrowingRequest", b =>
                {
                    b.Property<int>("rId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rId"), 1L, 1);

                    b.Property<string>("rName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Back_end.Models.BookBorrowingRequestDetails", b =>
                {
                    b.Property<int>("did")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("did"), 1L, 1);

                    b.Property<DateTime>("dateborrow")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("uid")
                        .HasColumnType("int");

                    b.Property<string>("whorequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("did");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("Back_end.Models.Category", b =>
                {
                    b.Property<int>("cId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cId"), 1L, 1);

                    b.Property<int>("bId")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Back_end.Models.User", b =>
                {
                    b.Property<int>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("uid"), 1L, 1);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateofbirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("permissions")
                        .HasColumnType("bit");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Back_end.Models.Book", b =>
                {
                    b.HasOne("Back_end.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategorycId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
